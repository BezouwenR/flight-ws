Prepare the Development Environment
To start developing with AndroMDA, prepare your development environment by following the steps shown below.

Install Java
Install J2SE Development Kit 6 (JDK 6) from here. This is the preferred version of the JDK for AndroMDA. We also support JDK version 1.5. We don't support JDK version 1.4 anymore!
Make sure that the JAVA_HOME environment variable is pointing to the directory where you installed the JDK. It is possible you have this variable set already, but just to make sure here's how to check.
   1. Go to the control panel and double-click on System. (If you are a Windows XP user, it's possible you have to open Performance and Maintenance before you will see the System icon.)
   2. Go to the Advanced tab and click on Environment Variables
   3. Make sure you have set the JAVA_HOME variable and that it is pointing to the directory where you installed the JDK. If not, add/edit the variable and set it to the correct value (e.g. C:\Program Files\Java\jdk1.6.0_06).
   
Install Maven
Maven is our preferred tool for building and deploying applications generated by AndroMDA. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting, and documentation from a central piece of information. If you are familiar with Ant, Maven is very similar except that it contains additional functionality:
   1. A hierarchical build environment, where properties configured in a POM file (pom.xml) flow down to POM files of all child projects.
   2. Standardized build tasks (clean, build, install, deploy, etc.)
   3. Dependency specifications for build and deploy tasks - for all internal and external libraries; tied to a specific released versions of dependent libraries
   4. A repository containing all versioned dependencies. This repository is used during the build and deploy processes (very similar to the .NET Global Assembly Cache concept).
Install Maven 2.0.8 by following the steps below. 
   1. Click here to download Maven 2.0.8.
   2. Unzip this file at C:\Program Files\Apache Software Foundation. A directory called maven-2.0.8 will be created which contains the Maven program.
   
Setup environment variables
We have seen earlier how to set environment variables such as JAVA_HOME, it is strongly recommended to set the following variables before continuing. We repeat JAVA_HOME here just for completeness.
JAVA_HOME 	Java installation directory, e.g. C:\Program Files\Java\jdk1.6.0_06
M2_HOME 	Maven installation directory, e.g. C:\Program Files\Apache Software Foundation\maven-2.0.8
M2_REPO 	Maven local repository, e.g. C:\Documents and Settings\your user name\.m2\repository
MAVEN_OPTS 	Parameters to pass to the Java VM when running Maven. Set this value to: -XX:MaxPermSize=128m -Xmx512m (required to build large Maven projects)
PATH 	    This makes sure the system will search for console commands in the directories listed here. If this property already exists you should simply add %JAVA_HOME%\bin;%M2_HOME%\bin

Change the default M2_REPO location
Maven by default saves the local repository in the default C:\Documents and Settings\your user name\.m2\repository location.
1. Edit the M2_HOME/conf/settings.xml file and modify the <localRepository/> tag to point to the new desired location;
2. Copy this settings.xml file in this location C:\Documents and Settings\your user name\.m2\settings.xml


Test Maven and create a local repository
Maven is based on the concept of a central, local repository located on your machine, where it stores artifacts such as 3rd party libraries as well as components created by you. When you create a new project, you must specify a Project Object Model (POM) in a file named pom.xml. In this file, you can tell Maven about the various 3rd party libraries and components your application depends on. When Maven starts to build the application, it will first fetch these dependencies from one or more remote repositories (generally located on the Internet) and store them in your local repository. This allows future builds to happen entirely locally. By default, the local repository is located at C:\Documents and Settings\your user name\.m2\repository. Note that so far we have installed only the Maven application, we have not created a local repository. Follow the steps below to test your Maven installation and force the creation of a local repository. We will use a standard Maven plugin to create a temporary project which we will delete later.
   1. Open a Command Prompt and change the current directory to any temporary directory, such as C:\temp.
   2. Execute the following command to make sure you can run Maven:
      mvn --version
   3. Maven should display the following output:
      Maven version: 2.0.8.
   4. Now execute the following command to create a temporary project:
      mvn archetype:create -DgroupId=testapp -DartifactId=testapp
      Make sure that you get a BUILD SUCCESSFUL message at the end. Sometimes due to bad Internet connectivity, Maven may not be able to download all dependencies. If your build fails due to this reason, try to issue the command again until you get a successful build.
   5. Verify that Maven created a temporary project called testapp in the current directory and also a local repository at the default location mentioned above. If both these results are achieved successfully, you can delete the temporary project that was just created.
   

   
Install AndroMDA
AndroMDA is a collection of maven artifacts that need to reside in the M2_REPO.
   1. Download AndroMDA from this location: http://sunet.dl.sourceforge.net/project/andromda/1.%20andromda%20V3.x/3.3/andromda-bin-3.3.zip
   2. Unzip the andromda-bin-3.3.zip/andromda/org folder into the M2_REPO folder
   3. Test the installation by typing in the console: mvn org.andromda.maven.plugins:andromdapp-maven-plugin:3.3:generate ; it should start downloading dependencies, and then ask for the type of application you want to generate: Please choose the type of application to generate [j2ee, richclient]
   4. Ctrl+C to terminate the execution

   
   
   
Install MagicDraw 16
MacigDraw is a tool that will allow you to model your applications in UML and export these models into a format that AndroMDA can understand. AndroMDA currently supports UML 1.4/XMI 1.2 as well as UML 2/EMF.



Install NetBeans 6.8
TODO



Developing the flight-ws webservice
   1.  Open a Command Prompt and change its directory to a location where you would like to create the application folder. In this example, we have chosen the E:\projects\ directory for this purpose. The application will be created in the directory E:\projects\flight-ws\. Note: If you decide to create the application at a different location, make sure there are no spaces in your pathname - otherwise Maven will run into build problems.
   2. Now execute the following command to generate the starter application. Answer the questions exactly as shown in the output that follows.

E:\projects>mvn org.andromda.maven.plugins:andromdapp-maven-plugin:3.3:generate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [org.andromda.maven.plugins:andromdapp-maven-plugin:3.3:generate] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [andromdapp:generate]
log4j:WARN No appenders could be found for logger (org.apache.commons.digester.Digester).
log4j:WARN Please initialize the log4j system properly.
INFO  [AndroMDA] discovered andromdapp type --> 'j2ee'
INFO  [AndroMDA] discovered andromdapp type --> 'richclient'

Please choose the type of application to generate [j2ee, richclient]
j2ee

Please enter the location in which your new application will be created (i.e. f:/java/development):
e:/projects

Please enter your first and last name (i.e. Chad Brandon):
George BALAN

Which kind of modeling tool will you use? [uml1.4, uml2, emf-uml2]:
emf-uml2

Please enter the name of your J2EE project (i.e. Animal Quiz):
Flight WS

Please enter an id for your J2EE project (i.e. animalquiz):
flight-ws

Please enter a version for your project (i.e. 1.0-SNAPSHOT):
1.0.1-SNAPSHOT

Please enter the root package name for your J2EE project (i.e. org.andromda.samples.animalquiz):
org.iesc

Would you like an EAR or standalone WAR? [ear, war]:
war

Please enter the type of transactional/persistence cartridge to use (enter 'none' if you don't want to use one) [spring, none]:
hibernate

Please enter the type of transactional/persistence cartridge to use (enter 'none' if you don't want to use one) [spring, none]:
spring TODO e posibil sa fie nevoie de "hibernate" aici

Please enter the Spring version to use (enter '1' for 1.x or '2' for 2.x) [1, 2]:
2

Please enter the database backend for the persistence layer [hypersonic, mysql, oracle, db2, informix, mssql, pointbase, postgres, sybase, sabdb, progress, derby]:
mysql

Will your project need workflow engine capabilities? (it uses jBPM and Hibernate3)? [yes, no]:
no

Will your project have a web user interface? [yes, no]:
no

Would you like to be able to expose your services as web services? [yes, no]:
yes

Would you like to use Axis or XFire as your SOAP Stack? [axis, xfire]:
xfire
-------------------------------------------------------------------------------------
    G e n e r a t i n g   A n d r o M D A   P o w e r e d   A p p l i c a t i o n
-------------------------------------------------------------------------------------
    Output: 'file:/e:/projects/flight-ws/pom.xml'
    Output: 'file:/e:/projects/flight-ws/core/pom.xml'
    Output: 'file:/e:/projects/flight-ws/core/target/classes/META-INF/ejb-jar.xml'
    Output: 'file:/e:/projects/flight-ws/readme.txt'
    Output: 'file:/e:/projects/flight-ws/web/pom.xml'
    Output: 'file:/e:/projects/flight-ws/web/src/main/properties/messages.properties'
    Output: 'file:/e:/projects/flight-ws/web/target/flight-ws-1.0.1-SNAPSHOT/WEB-INF/web.xml'
    Output: 'file:/e:/projects/flight-ws/web/src/main/resources/META-INF/context.xml'
    Output: 'file:/e:/projects/flight-ws/common/pom.xml'
    Output: 'file:/e:/projects/flight-ws/mda/pom.xml'
    Output: 'file:/e:/projects/flight-ws/mda/src/main/uml/flight-ws.uml2'
    Output: 'file:/e:/projects/flight-ws/mda/src/main/config/andromda.xml'
-------------------------------------------------------------------------------------
    New application generated to --> 'file:/e:/projects/flight-ws/'
    Instructions for your new application --> 'file:/e:/projects/flight-ws/readme.txt'
-------------------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3 minutes 26 seconds
[INFO] Finished at: Mon May 17 23:23:09 EEST 2010
[INFO] Final Memory: 9M/26M
[INFO] ------------------------------------------------------------------------
E:\projects>
   

Examine the various folders and files created by the andromdapp plugin. You will notice files called pom.xml in various folders under flight-ws. These files make up several Maven projects. In fact, the flight-ws directory contains a hierarchy of Maven projects as shown below.

flight-ws
     |
     |-- mda
     |
     |-- common
     |
     |-- core
     |
     +-- web
 

    * flight-ws: This is the master project that controls the overall build process and common properties.
    * mda: The mda project is the most important sub-project of the application. It houses the flight-ws UML model under the src/main/uml directory. The mda project is also where AndroMDA is configured to generate the files needed to assemble the application.
    * common: The common sub-project collects resources and classes that are shared among other sub-projects. These include value objects and embedded values.
    * core: The core sub-project collects resources and classes that use the Spring framework, optionally making use of Hibernate and/or EJBs under the hood. These include entity classes, data access objects, hibernate mapping files, and services.
    * web: The web sub-project collects those resources and classes that make up the presentation layer.

You can find more details about these files in readme.txt under the flight-ws folder. This file also contains a description of useful Maven targets for the project. As a matter of fact, developers frequently refer to this file for commonly used Maven commands. Open this file now and get yourself familiar with it.